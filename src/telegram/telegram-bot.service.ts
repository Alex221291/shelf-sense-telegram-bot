import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Context } from 'telegraf';
import { ReplyKeyboardMarkup, InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';
import { ShelfSenseService } from '../services/shelf-sense.service';

@Injectable()
export class TelegramBotService implements OnModuleInit {
  private bot: Telegraf<Context>;
  private userStates: Map<number, string> = new Map(); // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private userHistory: Map<number, string[]> = new Map(); // –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

  // –ü–µ—Ä–µ–≤–æ–¥—ã —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private getErrorTypeDisplayName(errorType: string): string {
    const errorTypeTranslations: Record<string, string> = {
      'PRICE_MISMATCH': 'üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞',
      'TAG_TEMPLATE_MISMATCH': 'üè∑Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç',
      'TAG_PRODUCT_MISMATCH': 'üîÑ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–≤–∞—Ä–∞',
      'TAG_MISSING': '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–Ω–∏–∫',
      'TAG_EXTRA': '‚ûï –õ–∏—à–Ω–∏–π —Ü–µ–Ω–Ω–∏–∫'
    };
    return errorTypeTranslations[errorType] || errorType;
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–¥ API
  private getErrorTypeCode(displayName: string): string {
    const displayNameToCode: Record<string, string> = {
      'üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞': 'PRICE_MISMATCH',
      'üè∑Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç': 'TAG_TEMPLATE_MISMATCH',
      'üîÑ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–≤–∞—Ä–∞': 'TAG_PRODUCT_MISMATCH',
      '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–Ω–∏–∫': 'TAG_MISSING',
      '‚ûï –õ–∏—à–Ω–∏–π —Ü–µ–Ω–Ω–∏–∫': 'TAG_EXTRA'
    };
    return displayNameToCode[displayName] || displayName;
  }

  constructor(
    private readonly shelfSenseService: ShelfSenseService,
    private readonly configService: ConfigService
  ) {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    this.bot = new Telegraf(token);
    this.setupCommands();
  }

  onModuleInit() {
    this.bot.launch();
    console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω');
  }

  private setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      const chatId = ctx.chat?.id;
      if (chatId) {
        console.log(`[${chatId}] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
        this.addToHistory(chatId, 'main');
      }

      const welcomeMessage = `
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ShelfSense Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã–∫–ª–∞–¥–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω–Ω–∏–∫–∞–º–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
      `;
      
      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['üè∑Ô∏è –í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞'],
          ['üè∑Ô∏è –¶–µ–Ω–Ω–∏–∫–∏'],
          ['üìö –ü–æ–º–æ—â—å'],
          ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(welcomeMessage, { reply_markup: keyboard });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      const text = ctx.message?.text;
      if (!text) return;

      switch (text) {
        case 'üè∑Ô∏è –í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞':
          await this.onShelfManagement(ctx);
          break;
        case 'üè∑Ô∏è –¶–µ–Ω–Ω–∏–∫–∏':
          await this.onPriceTags(ctx);
          break;
        case 'üìö –ü–æ–º–æ—â—å':
          await this.onHelp(ctx);
          break;
        case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é':
          await this.onRefreshMenu(ctx);
          break;
        case 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
          await this.onBackToMain(ctx);
          break;
        case 'üîô –ù–∞–∑–∞–¥':
          await this.onBack(ctx);
          break;
        case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const currentChatId = ctx.chat?.id;
          const currentUserState = currentChatId ? this.userStates.get(currentChatId) : null;
          
          if (currentUserState === 'price_tags') {
            await this.onPriceSummary(ctx);
          } else {
            await this.onShelfSummary(ctx);
          }
          break;
        case 'üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É':
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
          const groupChatId = ctx.chat?.id;
          const groupUserState = groupChatId ? this.userStates.get(groupChatId) : null;
          
          if (groupUserState === 'price_tags') {
            // –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (groupChatId) {
              this.userStates.set(groupChatId, 'selecting_price_group');
            }
            await this.onSelectGroup(ctx);
          } else {
            // –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä–∞
            await this.onSelectGroup(ctx);
          }
          break;
        case 'üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏':
          await this.onGeneratePdf(ctx);
          break;
        case '‚ùå –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏':
          await this.onSelectErrorType(ctx);
          break;
        case '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ':
          await this.onTaskCompleted(ctx);
          break;
        case '‚ùå –û—Ç–º–µ–Ω–∞':
          await this.onTaskCancelled(ctx);
          break;
        default:
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø/–æ—à–∏–±–æ–∫
          const chatId = ctx.chat?.id;
          const userState = chatId ? this.userStates.get(chatId) : null;
          
          if (userState === 'selecting_group') {
            await this.handleGroupSelection(ctx, text);
          } else if (userState === 'selecting_price_group') {
            await this.handlePriceGroupSelection(ctx, text);
          } else if (userState === 'selecting_error_type') {
            await this.handleErrorTypeSelection(ctx, text);
          } else if (text.startsWith('/')) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await this.handleCommands(ctx, text);
          } else {
            await ctx.reply('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
          }
          break;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
    this.bot.action('back_to_main', async (ctx) => {
      await this.onBackToMain(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      console.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:`, err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä–∞
  private async onShelfManagement(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      this.userStates.set(chatId, 'shelf_management');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä–∞`);
    }
    
    await this.showShelfManagementMenu(ctx, true);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä–∞ (—Å –æ–ø—Ü–∏–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é)
  private async showShelfManagementMenu(ctx: Context, addToHistory: boolean = true) {
    const chatId = ctx.chat?.id;
    if (chatId && addToHistory) {
      this.userStates.set(chatId, 'shelf_management');
      this.addToHistory(chatId, 'shelf_management');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä–∞`);
    } else if (chatId) {
      this.userStates.set(chatId, 'shelf_management');
      console.log(`[${chatId}] –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏ —Ç–æ–≤–∞—Ä–∞`);
    }
    
    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'],
        ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply('üè∑Ô∏è –í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤
  private async onPriceTags(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      this.userStates.set(chatId, 'price_tags');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤`);
    }
    
    await this.showPriceTagsMenu(ctx, true);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤ (—Å –æ–ø—Ü–∏–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é)
  private async showPriceTagsMenu(ctx: Context, addToHistory: boolean = true) {
    const chatId = ctx.chat?.id;
    if (chatId && addToHistory) {
      this.userStates.set(chatId, 'price_tags');
      this.addToHistory(chatId, 'price_tags');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤`);
    } else if (chatId) {
      this.userStates.set(chatId, 'price_tags');
      console.log(`[${chatId}] –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤`);
    }
    
    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏'],
        ['‚ùå –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏'],
        ['üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'],
        ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply('üè∑Ô∏è –¶–µ–Ω–Ω–∏–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–∫–ª–∞–¥–∫–µ
  private async onShelfSummary(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      this.addToHistory(chatId, 'shelf_summary');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–∫–ª–∞–¥–∫–µ`);
    }

    try {
      const summary = await this.shelfSenseService.getShelfSummary();
      
      const message = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:

ü™ë –°—Ç–µ–ª–ª–∞–∂–µ–π —Å –ø—É—Å—Ç–æ—Ç–∞–º–∏: ${summary.shelves_with_voids} (${summary.voids_percent.toFixed(1)}%)
üì¶ –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –∫ –≤—ã–∫–ª–∞–¥–∫–µ: ${summary.skus_to_fill}
üÜï –ù–æ–≤—ã—Ö –ø—É—Å—Ç–æ—Ç: ${summary.new_voids}

üèÜ TOP-5 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø –∫ –≤—ã–∫–ª–∞–¥–∫–µ:
${summary.top_groups.map((group, index) => `${index + 1}. ${group}`).join('\n')}
      `;

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ã–∫–ª–∞–¥–∫–µ');
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º
  private async onPriceSummary(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      this.addToHistory(chatId, 'price_summary');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º`);
    }

    try {
      const summary = await this.shelfSenseService.getPriceSummary();
      
      const message = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:

ü™ë –°—Ç–µ–ª–ª–∞–∂–µ–π —Å –æ—à–∏–±–∫–∞–º–∏: ${summary.shelves_with_errors} (${summary.errors_percent.toFixed(1)}%)
üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${summary.price_mismatch}
üìã –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç: ${summary.tag_template_mismatch}
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${summary.tags_missing}
‚ûï –õ–∏—à–Ω–∏–π: ${summary.tags_extra}

üèÜ TOP-5 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:
${summary.top_groups.map((group, index) => `${index + 1}. ${group}`).join('\n')}
      `;

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏'],
          ['‚ùå –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏'],
          ['üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º');
    }
  }

  // –í—ã–±–æ—Ä –º–µ—Ä—á-–≥—Ä—É–ø–ø—ã
  private async onSelectGroup(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      this.addToHistory(chatId, 'select_group');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Ä—á-–≥—Ä—É–ø–ø—É`);
    }

    try {
      const groups = await this.shelfSenseService.getMerchGroups();
      
      if (groups.length === 0) {
        await ctx.reply('üì≠ –ú–µ—Ä—á-–≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—É—Å—Ç–æ—Ç–∞—Ö –ø—Ä—è–º–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      const groupButtons = [];
      
      for (const group of groups.slice(0, 8)) {
        try {
          const voids = await this.shelfSenseService.getShelvesVoids(group.id);
          const voidCount = voids.length;
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          let buttonText = `${group.name}`;
          if (voidCount > 0) {
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª–æ–∫
            const shelfNumbers = [...new Set(voids.map(v => v.shelf_index))].sort((a, b) => a - b);
            const shelfList = shelfNumbers.join(',');
            buttonText += ` (–ø—É—Å—Ç–æ—Ç: ${voidCount}, –ø–æ–ª–∫–∏: ${shelfList})`;
          } else {
            buttonText += ` (–ø—É—Å—Ç–æ—Ç: 0)`;
          }
          
          groupButtons.push([buttonText]);
        } catch (error) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
          groupButtons.push([`${group.name} (?)`]);
        }
      }
      
      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ...groupButtons,
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply('üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä—á-–≥—Ä—É–ø–ø—É:', { reply_markup: keyboard });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
      if (chatId) {
        this.userStates.set(chatId, 'selecting_group');
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        (this as any).userGroups = (this as any).userGroups || new Map();
        (this as any).userGroups.set(chatId, groups);
      }
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä—á-–≥—Ä—É–ø–ø');
    }
  }

  // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  private async onSelectErrorType(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      this.addToHistory(chatId, 'select_error_type');
      this.userStates.set(chatId, 'selecting_error_type');
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏`);
    }

          const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞'],
          ['üè∑Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç'],
          ['üîÑ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–≤–∞—Ä–∞'],
          ['‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–Ω–∏–∫'],
          ['‚ûï –õ–∏—à–Ω–∏–π —Ü–µ–Ω–Ω–∏–∫'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

    await ctx.reply('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏:', { reply_markup: keyboard });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
  private async onGeneratePdf(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF —Ü–µ–Ω–Ω–∏–∫–æ–≤`);
    }

    try {
      console.log(`[${chatId}] –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF...`);
      const pdfResult = await this.shelfSenseService.generateLabelsPdf();
      console.log(`[${chatId}] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:`, JSON.stringify(pdfResult, null, 2));
      
      const message = `‚úÖ PDF-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –∏ –∑–∞–º–µ–Ω—ã —Ü–µ–Ω–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!

üìÑ **–§–∞–π–ª:** –¶–µ–Ω–Ω–∏–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏.pdf
üîó **–°—Å—ã–ª–∫–∞:** ${pdfResult.file_url}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞`;
      
      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
      console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:`, error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
  }

  // –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
  private async onTaskCompleted(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é`);
    }

    const message = '‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!';
    
    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply(message, { reply_markup: keyboard });
  }

  // –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
  private async onTaskCancelled(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–¥–∞—á—É`);
    }

    const message = '‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.';
    
    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply(message, { reply_markup: keyboard });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
  private async onRefreshMenu(ctx: Context) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—é
    const chatId = ctx.chat?.id;
    if (chatId) {
      console.log(`[${chatId}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é`);
      this.userStates.delete(chatId);
      this.userHistory.delete(chatId);
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.addToHistory(chatId, 'main');
    }
    
    const welcomeMessage = `
üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!

üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ShelfSense Bot

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:
    `;
    
    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üè∑Ô∏è –í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞'],
        ['üè∑Ô∏è –¶–µ–Ω–Ω–∏–∫–∏'],
        ['üìö –ü–æ–º–æ—â—å'],
        ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply(welcomeMessage, { reply_markup: keyboard });
  }

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  private async onBackToMain(ctx: Context) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—é
    const chatId = ctx.chat?.id;
    if (chatId) {
      console.log(`[${chatId}] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`);
      this.userStates.delete(chatId);
      this.userHistory.delete(chatId);
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.addToHistory(chatId, 'main');
    }
    
    const welcomeMessage = `
üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ShelfSense Bot

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:
    `;
    
    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üè∑Ô∏è –í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞'],
        ['üè∑Ô∏è –¶–µ–Ω–Ω–∏–∫–∏'],
        ['üìö –ü–æ–º–æ—â—å'],
        ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply(welcomeMessage, { reply_markup: keyboard });
  }

  // –°–ø—Ä–∞–≤–∫–∞
  private async onHelp(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (chatId) {
      console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —Å–ø—Ä–∞–≤–∫—É`);
    }

    const helpMessage = `
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ ShelfSense Bot**

ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –º–∞–≥–∞–∑–∏–Ω–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã–∫–ª–∞–¥–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ —Ü–µ–Ω–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é.

üìä **–í—ã–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞:**
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:
  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–µ–ª–ª–∞–∂–µ–π —Å –ø—É—Å—Ç–æ—Ç–∞–º–∏
  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫ –≤—ã–∫–ª–∞–¥–∫–µ
  - TOP-5 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø –∫ –≤—ã–∫–ª–∞–¥–∫–µ
‚Ä¢ **–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É** - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–µ—Ä—á-–≥—Ä—É–ø–ø—É –∏ —É–≤–∏–¥–µ—Ç—å:
  - –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–∫–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏
  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö (–∞—Ä—Ç–∏–∫—É–ª, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ—Å—Ç–∞—Ç–∫–∏)
  - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É

üè∑Ô∏è **–¶–µ–Ω–Ω–∏–∫–∏:**
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º —Ü–µ–Ω–Ω–∏–∫–æ–≤:
  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–µ–ª–ª–∞–∂–µ–π —Å –æ—à–∏–±–∫–∞–º–∏
  - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  - TOP-5 —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
‚Ä¢ **–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–∏** - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏
‚Ä¢ **–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏** - —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º:
  - üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞
  - üè∑Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–∫–µ—Ç
  - üîÑ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–≤–∞—Ä–∞
  - ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–Ω–∏–∫
  - ‚ûï –õ–∏—à–Ω–∏–π —Ü–µ–Ω–Ω–∏–∫
‚Ä¢ **–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ

üéØ **–ù–∞–≤–∏–≥–∞—Ü–∏—è:**
‚Ä¢ **üîô –ù–∞–∑–∞–¥** - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
‚Ä¢ **üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é** - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ **üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –í –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "‚ùì –ü–æ–º–æ—â—å" –≤ –ª—é–±–æ–º –º–µ–Ω—é
    `;

    const keyboard: ReplyKeyboardMarkup = {
      keyboard: [
        ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };

    await ctx.reply(helpMessage, { reply_markup: keyboard });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  private async handleCommands(ctx: Context, command: string) {
    const parts = command.split(' ');
    const cmd = parts[0];

    switch (cmd) {
      case '/voids_group':
        await this.handleVoidsGroup(ctx, parts);
        break;
      case '/price_errors_type':
        await this.handlePriceErrorsType(ctx, parts);
        break;
      case '/price_errors_group':
        await this.handlePriceErrorsGroup(ctx, parts);
        break;
      case '/help':
        await this.onHelp(ctx);
        break;
      default:
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.');
        break;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /voids_group
  private async handleVoidsGroup(ctx: Context, parts: string[]) {
    if (parts.length < 2) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: /voids_group abc123');
      return;
    }

    const groupId = parts[1];
    
    try {
      const voids = await this.shelfSenseService.getShelvesVoids(groupId);
      
      if (voids.length === 0) {
        await ctx.reply('üì≠ –ü—É—Å—Ç–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      let responseMessage = `ü™ë –ü–µ—Ä–µ—á–µ–Ω—å –ø—É—Å—Ç–æ—Ç –≤ –≥—Ä—É–ø–ø–µ (ID: ${groupId}):\n\n`;
      voids.forEach((voidItem, index) => {
        responseMessage += `${index + 1}. –ü–æ–ª–∫–∞ ${voidItem.shelf_index} / –ü–æ–∑–∏—Ü–∏—è ${voidItem.position}\n`;
        responseMessage += `   [${voidItem.sku}] ${voidItem.name}\n`;
        responseMessage += `   –û—Å—Ç–∞—Ç–∫–∏: ${voidItem.stock}\n\n`;
      });
      responseMessage += 'üì∏ –§–æ—Ç–æ —Å—Ç–µ–ª–ª–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö';

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'],
          ['‚ùå –û—Ç–º–µ–Ω–∞'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(responseMessage, { reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—É—Å—Ç–æ—Ç');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price_errors_type
  private async handlePriceErrorsType(ctx: Context, parts: string[]) {
    if (parts.length < 2) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏. –ü—Ä–∏–º–µ—Ä: /price_errors_type PRICE_MISMATCH');
      return;
    }

    const errorType = parts[1];
    
    try {
      const errors = await this.shelfSenseService.getPriceErrorsByType(errorType);
      
      if (errors.length === 0) {
        await ctx.reply(`üì≠ –û—à–∏–±–∫–∏ —Ç–∏–ø–∞ "${errorType}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      let responseMessage = `üè∑Ô∏è –ü–µ—Ä–µ—á–µ–Ω—å –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º (—Ç–∏–ø: ${errorType}):\n\n`;
      errors.forEach((error, index) => {
        responseMessage += `${index + 1}. ${error.merch_group.name}\n`;
        responseMessage += `   –ü–æ–ª–∫–∞ ${error.shelf_index} / –ü–æ–∑–∏—Ü–∏—è ${error.position}\n`;
        responseMessage += `   [${error.sku || '–ù–µ —É–∫–∞–∑–∞–Ω'}] ${error.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        if (error.details) {
          responseMessage += `   –î–µ—Ç–∞–ª–∏: ${error.details}\n`;
        }
        responseMessage += '\n';
      });
      responseMessage += 'üì∏ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å —Ñ–æ—Ç–æ —Å—Ç–µ–ª–ª–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö';

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'],
          ['‚ùå –û—Ç–º–µ–Ω–∞'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(responseMessage, { reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price_errors_group
  private async handlePriceErrorsGroup(ctx: Context, parts: string[]) {
    if (parts.length < 2) {
      await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: /price_errors_group abc123');
      return;
    }

    const groupId = parts[1];
    
    try {
      const errors = await this.shelfSenseService.getPriceErrorsByGroup(groupId);
      
      if (errors.length === 0) {
        await ctx.reply(`üì≠ –û—à–∏–±–∫–∏ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ (ID: ${groupId}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      let responseMessage = `üè∑Ô∏è –ü–µ—Ä–µ—á–µ–Ω—å –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ (ID: ${groupId}):\n\n`;
      errors.forEach((error, index) => {
        responseMessage += `${index + 1}. ${this.getErrorTypeDisplayName(error.error_type)} / –ü–æ–ª–∫–∞ ${error.shelf_index} / –ü–æ–∑–∏—Ü–∏—è ${error.position}\n`;
        responseMessage += `   [${error.sku || '–ù–µ —É–∫–∞–∑–∞–Ω'}] ${error.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        if (error.details) {
          responseMessage += `   –î–µ—Ç–∞–ª–∏: ${error.details}\n`;
        }
        responseMessage += '\n';
      });
      responseMessage += 'üì∏ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å —Ñ–æ—Ç–æ —Å—Ç–µ–ª–ª–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö';

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'],
          ['‚ùå –û—Ç–º–µ–Ω–∞'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(responseMessage, { reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
  private async handleGroupSelection(ctx: Context, groupName: string) {
    const chatId = ctx.chat?.id;
    if (!chatId) return;

    console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É: ${groupName}`);

    const userGroups = (this as any).userGroups?.get(chatId);
    if (!userGroups) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞.');
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    // –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–ø—É—Å—Ç–æ—Ç: X, –ø–æ–ª–∫–∏: Y,Z)" –∏–ª–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (?)"
    const originalGroupName = groupName.replace(/\s*\(–ø—É—Å—Ç–æ—Ç:\s*\d+(?:,\s*–ø–æ–ª–∫–∏:\s*[\d,]+)?\)$/, '').replace(/\s*\(\?\)$/, '');
    
    const selectedGroup = userGroups.find((group: any) => group.name === originalGroupName);
    if (!selectedGroup) {
      await ctx.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Å—Ç–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
      const voids = await this.shelfSenseService.getShelvesVoids(selectedGroup.id);
      
      if (voids.length === 0) {
        await ctx.reply('üì≠ –ü—É—Å—Ç–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      let responseMessage = `ü™ë –ü–µ—Ä–µ—á–µ–Ω—å –ø—É—Å—Ç–æ—Ç –≤ –≥—Ä—É–ø–ø–µ "${originalGroupName}":\n\n`;
      voids.forEach((voidItem, index) => {
        responseMessage += `${index + 1}. –ü–æ–ª–∫–∞ ${voidItem.shelf_index} / –ü–æ–∑–∏—Ü–∏—è ${voidItem.position}\n`;
        responseMessage += `   [${voidItem.sku}] ${voidItem.name}\n`;
        responseMessage += `   –û—Å—Ç–∞—Ç–∫–∏: ${voidItem.stock}\n\n`;
      });
      responseMessage += 'üì∏ –§–æ—Ç–æ —Å—Ç–µ–ª–ª–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö';

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'],
          ['‚ùå –û—Ç–º–µ–Ω–∞'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(responseMessage, { reply_markup: keyboard });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã
      this.userStates.delete(chatId);
      (this as any).userGroups.delete(chatId);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—É—Å—Ç–æ—Ç');
      this.userStates.delete(chatId);
      (this as any).userGroups.delete(chatId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  private async handleErrorTypeSelection(ctx: Context, errorType: string) {
    const chatId = ctx.chat?.id;
    if (!chatId) return;

    console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø –æ—à–∏–±–∫–∏: ${errorType}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–¥ –¥–ª—è API
    const errorTypeCode = this.getErrorTypeCode(errorType);
    
    try {
      const errors = await this.shelfSenseService.getPriceErrorsByType(errorTypeCode);
      
      if (errors.length === 0) {
        await ctx.reply(`üì≠ –û—à–∏–±–∫–∏ —Ç–∏–ø–∞ "${errorType}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      let responseMessage = `üè∑Ô∏è –ü–µ—Ä–µ—á–µ–Ω—å –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º (—Ç–∏–ø: ${errorType}):\n\n`;
      errors.forEach((error, index) => {
        responseMessage += `${index + 1}. ${error.merch_group.name}\n`;
        responseMessage += `   –ü–æ–ª–∫–∞ ${error.shelf_index} / –ü–æ–∑–∏—Ü–∏—è ${error.position}\n`;
        responseMessage += `   [${error.sku || '–ù–µ —É–∫–∞–∑–∞–Ω'}] ${error.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        if (error.details) {
          responseMessage += `   –î–µ—Ç–∞–ª–∏: ${error.details}\n`;
        }
        responseMessage += '\n';
      });
      responseMessage += 'üì∏ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å —Ñ–æ—Ç–æ —Å—Ç–µ–ª–ª–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö';

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'],
          ['‚ùå –û—Ç–º–µ–Ω–∞'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(responseMessage, { reply_markup: keyboard });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(chatId);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º');
      this.userStates.delete(chatId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ü–µ–Ω–Ω–∏–∫–æ–≤
  private async handlePriceGroupSelection(ctx: Context, groupName: string) {
    const chatId = ctx.chat?.id;
    if (!chatId) return;

    console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É –¥–ª—è —Ü–µ–Ω–Ω–∏–∫–æ–≤: ${groupName}`);

    const userGroups = (this as any).userGroups?.get(chatId);
    if (!userGroups) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞.');
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    // –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–ø—É—Å—Ç–æ—Ç: X, –ø–æ–ª–∫–∏: Y,Z)" –∏–ª–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (?)"
    const originalGroupName = groupName.replace(/\s*\(–ø—É—Å—Ç–æ—Ç:\s*\d+(?:,\s*–ø–æ–ª–∫–∏:\s*[\d,]+)?\)$/, '').replace(/\s*\(\?\)$/, '');
    
    const selectedGroup = userGroups.find((group: any) => group.name === originalGroupName);
    if (!selectedGroup) {
      await ctx.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
      const errors = await this.shelfSenseService.getPriceErrorsByGroup(selectedGroup.id);
      
      if (errors.length === 0) {
        await ctx.reply(`üì≠ –û—à–∏–±–∫–∏ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ "${groupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      let responseMessage = `üè∑Ô∏è –ü–µ—Ä–µ—á–µ–Ω—å –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ "${originalGroupName}":\n\n`;
      errors.forEach((error, index) => {
        responseMessage += `${index + 1}. ${this.getErrorTypeDisplayName(error.error_type)} / –ü–æ–ª–∫–∞ ${error.shelf_index} / –ü–æ–∑–∏—Ü–∏—è ${error.position}\n`;
        responseMessage += `   [${error.sku || '–ù–µ —É–∫–∞–∑–∞–Ω'}] ${error.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        if (error.details) {
          responseMessage += `   –î–µ—Ç–∞–ª–∏: ${error.details}\n`;
        }
        responseMessage += '\n';
      });
      responseMessage += 'üì∏ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å —Ñ–æ—Ç–æ —Å—Ç–µ–ª–ª–∞–∂–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö';

      const keyboard: ReplyKeyboardMarkup = {
        keyboard: [
          ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'],
          ['‚ùå –û—Ç–º–µ–Ω–∞'],
          ['üîô –ù–∞–∑–∞–¥', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      };

      await ctx.reply(responseMessage, { reply_markup: keyboard });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã
      this.userStates.delete(chatId);
      (this as any).userGroups.delete(chatId);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ');
      this.userStates.delete(chatId);
      (this as any).userGroups.delete(chatId);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  private addToHistory(chatId: number, page: string) {
    if (!this.userHistory.has(chatId)) {
      this.userHistory.set(chatId, []);
    }
    const history = this.userHistory.get(chatId)!;
    history.push(page);
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if (history.length > 10) {
      history.shift();
    }
    console.log(`[${chatId}] –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${history.join(' ‚Üí ')}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
  private getPreviousPage(chatId: number): string | null {
    const history = this.userHistory.get(chatId);
    if (!history || history.length < 2) {
      return null;
    }
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é
    history.pop();
    return history[history.length - 1] || null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  private async onBack(ctx: Context) {
    const chatId = ctx.chat?.id;
    if (!chatId) return;

    console.log(`[${chatId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"`);

    const previousPage = this.getPreviousPage(chatId);
    console.log(`[${chatId}] –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${previousPage}`);
    
    if (!previousPage) {
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      console.log(`[${chatId}] –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é`);
      await this.onBackToMain(ctx);
      return;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log(`[${chatId}] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${previousPage}`);
    switch (previousPage) {
      case 'main':
        await this.onBackToMain(ctx);
        break;
      case 'shelf_management':
        await this.showShelfManagementMenu(ctx, false); // false = –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        break;
      case 'price_tags':
        await this.showPriceTagsMenu(ctx, false); // false = –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        break;
      case 'shelf_summary':
        await this.showShelfManagementMenu(ctx, false); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–∫–ª–∞–¥–∫–∏
        break;
      case 'price_summary':
        await this.showPriceTagsMenu(ctx, false); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤
        break;
      case 'select_group':
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const userState = this.userStates.get(chatId);
        if (userState === 'selecting_price_group') {
          await this.showPriceTagsMenu(ctx, false);
        } else {
          await this.showShelfManagementMenu(ctx, false);
        }
        break;
      case 'select_error_type':
        await this.showPriceTagsMenu(ctx, false); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ü–µ–Ω–Ω–∏–∫–æ–≤
        break;
      default:
        console.log(`[${chatId}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${previousPage}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é`);
        await this.onBackToMain(ctx);
        break;
    }
  }
}
